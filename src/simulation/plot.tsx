import {useEffect, useRef, useState} from 'react';
import * as Highcharts from 'highcharts';
import SeriesLabel from 'highcharts/modules/series-label';
import {HighchartsReact} from 'highcharts-react-official';
import {SimulationResult} from "../commands/simulation.ts";
import exporting from 'highcharts/modules/exporting';
import {speciesIdMapType} from "./simulation.tsx";

export function convertDataToHighchart(results: SimulationResult, speciesIDMap: speciesIdMapType): Highcharts.Options {
    const series = Object.entries(results.species).map(([speciesID, data]) => {
        return {
            name: speciesIDMap[speciesID],
            label: {
                enabled: true,
            },
            type: 'spline',
            data: data.map((value, index) => [results.time[index], value])
        }
    });


    // Sort series by name
    series.sort((a, b) => {
        if (a.name < b.name) {
            return -1;
        }
        if (a.name > b.name) {
            return 1;
        }
        return 0;
    });

    // @ts-ignore
    return {
        chart: {
            animation: false,
        },
        tooltip: {
            shared: true,
            valueDecimals: 2,
        },
        title: {
            text: 'Simulation Results',
            align: 'left'
        },
        subtitle: {
            text: 'Generated by EnzymeML',
            align: 'left'
        },
        exporting: {
            enabled: true
        },
        xAxis: {
            title: {
                text: 'Time'
            }
        },
        yAxis: {
            title: {
                text: 'Value'
            }
        },
        plotOptions: {
            series: {
                label: {
                    enabled: true,
                    connectorAllowed: false,
                }
            }
        },
        series: series
    };

}

SeriesLabel(Highcharts);
exporting(Highcharts);

const SimulationPlot = (
    {
        results,
        speciesIDMap,
    }: {
        results: SimulationResult[],
        speciesIDMap: speciesIdMapType,
    }
) => {
    // States and Refs
    const chartComponentRef = useRef<HighchartsReact.RefObject>(null);
    const [options, setOptions] = useState<Highcharts.Options>({});

    // Effects
    useEffect(() => {
        if (results.length === 0) {
            return;
        }

        const converted = convertDataToHighchart(results[0], speciesIDMap);
        setOptions(converted);

    }, [results]);

    return (
        <>
            {
                options ? <HighchartsReact
                    highcharts={Highcharts}
                    options={options}
                    ref={chartComponentRef}
                    constructorType={'chart'}
                /> : null
            }
        </>
    )
};

export {SimulationPlot};