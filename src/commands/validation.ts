
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
/**
 * Retrieves the current validation report for the EnzymeML document
 * 
 * This function returns the cached validation report that contains consistency
 * checks and validation results for the current EnzymeML document. The report
 * includes information about data integrity, missing required fields, and
 * other validation issues that may need attention.
 * 
 * # Arguments
 * * `state` - The shared EnzymeML document state containing the validation report
 * 
 * # Returns
 * Result containing either the validation Report object or an error message
 */
async getValidationReport() : Promise<Result<Report, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_validation_report") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Retrieves validation results filtered by a specific identifier
 * 
 * This function filters the current validation report to return only those
 * validation results that match the specified identifier. This is particularly
 * useful when you need to examine validation issues related to a specific
 * component, measurement, or entity within the EnzymeML document. The function
 * accesses the cached validation report and applies the identifier filter to
 * return a subset of validation results that are relevant to the requested
 * identifier.
 * 
 * # Arguments
 * * `state` - The shared EnzymeML document state containing the validation report
 * * `identifier` - The specific identifier string to filter validation results by
 * 
 * # Returns
 * A vector of ValidationResult objects that match the specified identifier
 */
async getValidationReportByIdentifier(identifier: string) : Promise<ValidationResult[]> {
    return await TAURI_INVOKE("get_validation_report_by_identifier", { identifier });
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

/**
 * Validation report containing all consistency check results
 */
export type Report = { 
/**
 * Whether the document is valid overall
 */
is_valid: boolean; 
/**
 * Vector of individual validation results
 */
errors: ValidationResult[] }
/**
 * Severity levels for validation issues
 */
export type Severity = "Error" | "Warning" | "Info"
/**
 * A single validation issue found during checking
 */
export type ValidationResult = { 
/**
 * JSON pointer path to the location of the validation issue
 */
location: string; 
/**
 * Human readable description of the validation issue
 */
message: string; 
/**
 * Severity level of the validation issue
 */
severity: Severity; 
/**
 * Identifier of the validation issue
 */
identifier: string | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
